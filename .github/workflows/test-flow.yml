name: CI/CD Pipeline
on:
  push:
    branches: [master]
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Clone To Instance Runs The Workflow
      
      # Setup Java for Maven
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Update Maven Project Version
      - run: |
          mvn release:update-versions -DautoVersionSubmodules=true  # Update Version Include Submodules
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Update Version"
          git push

  docker:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v3
      
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Define in repository secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Define in repository secrets
      
      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
      
      # Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    env:
      AWS_SG_ID: sg-034df6c975b420d78
      AWS_EC2_ID: ${{ secrets.AWS_EC2_ID }} 
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: il-central-1
      
      - name: Get EC2 Public IP
        id: ec2-ip
        run: |
          IP=$(aws ec2 describe-instances --instance-ids $AWS_EC2_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "Debug: Raw IP value is: $IP"
          if [ "$IP" = "None" ] || [ -z "$IP" ]; then
            echo "Error: Could not get EC2 IP address"
            echo "Debug: AWS_EC2_ID is: $AWS_EC2_ID"
            aws ec2 describe-instances --instance-ids $AWS_EC2_ID
            exit 1
          fi
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          echo "Successfully set EC2_IP to: $IP"
      
      - name: Get Runner IP
        id: ip
        uses: haythem/public-ip@v1.2
      
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      
      - name: Add Known Hosts
        run: |
          echo "Debug: Current EC2_IP value is: ${{ env.EC2_IP }}"
          if [ "${{ env.EC2_IP }}" = "None" ] || [ -z "${{ env.EC2_IP }}" ]; then
            echo "Error: EC2_IP is not properly set"
            exit 1
          fi
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts || {
            echo "Error: ssh-keyscan failed"
            exit 1
          }
      
      - name: Whitelist Runner IP
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
      - name: Execute Remote SSH Commands
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ env.EC2_IP }} "echo Hello World"
      
      - name: Remove Runner IP
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32