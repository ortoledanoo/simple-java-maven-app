name: Increment Version
on:
  push:
    branches: [master]
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Clone To Instance Runs The Workflow
      
      # Setup Java for Maven
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Update Maven Project Version
      - run: |
          mvn release:update-versions -DautoVersionSubmodules=true  # Update Version Include Submodules
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Update Version"
          git push

  docker:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v3
      
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Define in repository secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Define in repository secrets
      
      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
      
      # Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: docker
    env:
      AWS_INSTANCE_SG_ID: sg-034df6c975b420d78
      EC2_INSTANCE_ID: ${{ secrets.AWS_INSTANCE_ID }} 
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY}}
          aws-region: il-central-1
      
      - name: Get EC2 Public IP
        id: ec2-ip
        run: |
          echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)" >> $GITHUB_ENV
      
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ env.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
      
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
      - name: ssh into your ec2 and do whatever
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ env.EC2_PUBLIC_IP }} "echo Hello World"
      
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32